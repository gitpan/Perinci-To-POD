#!/usr/bin/perl

use 5.010;
use strict;
use warnings;

our $VERSION = '0.35'; # VERSION

eval { require Perinci::CmdLine };
if ($@) {
    die "This script requires Perinci::CmdLine, please install it first.\n";
}

our %SPEC;

$SPEC{gen_doc} = {
    v => 1.1,
    args => {
        url => {
            summary => 'URL',
            req => 1,
            pos => 0,
            schema => 'str*',
        },
        format => {
            summary => 'Format',
            schema => 'str',
        },
    },
};
sub gen_doc {
    require File::Which;

    my %args = @_;
    # XXX schema
    my $url = $args{url} or return [400, "Please specify url"];
    $url = "pl:$url" if $url =~ m!^/!;

    my $format = $args{format} // "man";
    $format = "text" unless
        File::Which::which("pod2man") && File::Which::which("man");

    # XXX check if url is a module or function or ...

    my ($doc, $res);
    if ($format eq 'man') {
        require Perinci::To::POD;
        $doc = Perinci::To::POD->new(url=>$url);
        $res = $doc->gen_doc;
        [200, "OK", $res, {
            "cmdline.page_result"=>1,
            "cmdline.pager"=>"pod2man | man -l -"}];
    } else {
        require Perinci::To::Text;
        $doc = Perinci::To::Text->new(url=>$url);
        $res = $doc->gen_doc;
        [200, "OK", $res, {"cmdline.page_result"=>1}];
    }

}

$ENV{LOG} //= 0; # speed up startup, but allow overriding
my $cmd = Perinci::CmdLine->new(
    url => '/main/gen_doc',
);
delete $cmd->common_opts->{format};
delete $cmd->common_opts->{format_options};
$cmd->run;

# ABSTRACT: Display text/POD documentation of Riap package
# PODNAME: peri-pkg-doc

__END__

=pod

=encoding utf-8

=head1 NAME

peri-pkg-doc - Display text/POD documentation of Riap package

=head1 VERSION

version 0.35

=head1 SYNOPSIS

From command-line:

 % peri-pkg-doc /Some/Module/
 % peri-pkg-doc --format=text https://example.com/api/
 % peri-pkg-doc --help

=head1 DESCRIPTION

This script will generate text/POD documentation for a Riap package. All
information about entities like functions and variables in the package will be
retrieved and displayed as well. The end result looks similar to a POD
documentation for a Perl module.

=head1 AUTHOR

Steven Haryanto <stevenharyanto@gmail.com>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2013 by Steven Haryanto.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
